// <auto-generated />
using LibraryManagementCleanArchitecture.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementCleanArchitecture.Persistance.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.Borrowing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("Borrowing");
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.LoginInfo", b =>
                {
                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BorrowedBooksNum")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("People", (string)null);

                    b.HasDiscriminator<int>("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.ManagementStaff", b =>
                {
                    b.HasBaseType("LibraryManagementCleanArchitecture.Domain.Entities.Person");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.Member", b =>
                {
                    b.HasBaseType("LibraryManagementCleanArchitecture.Domain.Entities.Person");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.MinorStaff", b =>
                {
                    b.HasBaseType("LibraryManagementCleanArchitecture.Domain.Entities.Person");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.Book", b =>
                {
                    b.HasOne("LibraryManagementCleanArchitecture.Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.Borrowing", b =>
                {
                    b.HasOne("LibraryManagementCleanArchitecture.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementCleanArchitecture.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.LoginInfo", b =>
                {
                    b.HasOne("LibraryManagementCleanArchitecture.Domain.Entities.Person", "Person")
                        .WithOne("LoginInfo")
                        .HasForeignKey("LibraryManagementCleanArchitecture.Domain.Entities.LoginInfo", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LibraryManagementCleanArchitecture.Domain.Entities.Person", b =>
                {
                    b.Navigation("LoginInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
